{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그',\n    Images: [{\n      id: shortId.generate()\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //더미 데이터  User,Image등이 대문자로 시작하는 이유는 시큐얼라이즈 라이브러리에서 대문자로 사용되기때문\n\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph,\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로'\n    }\n  };\n};\n\n//immer로 스위치문을 다 바꿔줬음. 불변성을 지키면서 state => draft\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      //아래 주석 코드가 위 2줄로 바뀜. unshift *\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // //불변성 지키려면 이렇게 해줌...\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        return state;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","src","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["C:/Users/정다빈/Desktop/nodebird/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n\r\n      User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n      },\r\n\r\n      content: '첫 번째 게시글 #해시태그',\r\n\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n        },\r\n      ],\r\n\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'nero',\r\n          },\r\n          content: '우와',\r\n        },\r\n\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'hero',\r\n          },\r\n          content: '사고싶어요~',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}; //더미 데이터  User,Image등이 대문자로 시작하는 이유는 시큐얼라이즈 라이브러리에서 대문자로 사용되기때문\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph,\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n});\r\n\r\n//immer로 스위치문을 다 바꿔줬음. 불변성을 지키면서 state => draft\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      //아래 주석 코드가 위 2줄로 바뀜. unshift *\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // //불변성 지키려면 이렇게 해줌...\r\n\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}