{"ast":null,"code":"import { all, put, takeEvery, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_OUT_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nfunction logInAPI(data) {\n  return axios.post('/api/login');\n}\n//여기선 * 을 붙이지않는다\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(logInAPI, action.data); //call fork는 call,fork(함수, 매개변수)\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      err: err.response.data\n    });\n  }\n}\n//성공 결과 result.data  실패 결과 err.response.data 에 담겨있음. put = dispatch\n\nfunction logOutAPI(data) {\n  return axios.post('/api/logout');\n}\nfunction* logOut(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(logOutAPI, action.data); 서버가 없을땐 delay로 1초 기다렸다 나오게\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      err: err.response.data\n    });\n  }\n}\nfunction signUpAPI(data) {\n  return axios.post('/api/logout'); //signUpAPI는 generator가 아님.\n}\n\nfunction* signUp(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(signUpAPI, action.data); 서버가 없을땐 delay로 1초 기다렸다 나오게\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      err: err.response.data\n    });\n  }\n}\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn); //LOG_IN 이나 LOG_IN_REQUEST 할떄 불러오나 같음\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","put","takeEvery","fork","delay","axios","LOG_IN_REQUEST","LOG_OUT_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","type","err","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/정다빈/Desktop/nodebird/front/sagas/user.js"],"sourcesContent":["import { all, put, takeEvery, fork, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login');\r\n}\r\n//여기선 * 을 붙이지않는다\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logInAPI, action.data); //call fork는 call,fork(함수, 매개변수)\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      err: err.response.data,\r\n    });\r\n  }\r\n}\r\n//성공 결과 result.data  실패 결과 err.response.data 에 담겨있음. put = dispatch\r\n\r\nfunction logOutAPI(data) {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(logOutAPI, action.data); 서버가 없을땐 delay로 1초 기다렸다 나오게\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      err: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('/api/logout'); //signUpAPI는 generator가 아님.\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield delay(1000);\r\n    //const result = yield call(signUpAPI, action.data); 서버가 없을땐 delay로 1초 기다렸다 나오게\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      err: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeEvery(LOG_IN_REQUEST, logIn); //LOG_IN 이나 LOG_IN_REQUEST 할떄 불러오나 같음\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,IAAI,EAAEC,KAAK,QAAQ,oBAAoB;AACrE,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,cAAc,EACdC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,eAAe,QACV,kBAAkB;AAEzB,SAASC,QAAQ,CAACC,IAAI,EAAE;EACtB,OAAOX,KAAK,CAACY,IAAI,CAAC,YAAY,CAAC;AACjC;AACA;;AAEA,UAAUC,KAAK,CAACC,MAAM,EAAE;EACtB,IAAI;IACF,MAAMf,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMH,GAAG,CAAC;MACRmB,IAAI,EAAEZ,cAAc;MACpBQ,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMpB,GAAG,CAAC;MACRmB,IAAI,EAAEX,cAAc;MACpBY,GAAG,EAAEA,GAAG,CAACC,QAAQ,CAACN;IACpB,CAAC,CAAC;EACJ;AACF;AACA;;AAEA,SAASO,SAAS,CAACP,IAAI,EAAE;EACvB,OAAOX,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC;AAClC;AAEA,UAAUO,MAAM,CAACL,MAAM,EAAE;EACvB,IAAI;IACF,MAAMf,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMH,GAAG,CAAC;MACRmB,IAAI,EAAEV,eAAe;MACrBM,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMpB,GAAG,CAAC;MACRmB,IAAI,EAAET,eAAe;MACrBU,GAAG,EAAEA,GAAG,CAACC,QAAQ,CAACN;IACpB,CAAC,CAAC;EACJ;AACF;AAEA,SAASS,SAAS,CAACT,IAAI,EAAE;EACvB,OAAOX,KAAK,CAACY,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;AACpC;;AAEA,UAAUS,MAAM,CAACP,MAAM,EAAE;EACvB,IAAI;IACF,MAAMf,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMH,GAAG,CAAC;MACRmB,IAAI,EAAEP,eAAe;MACrBG,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMpB,GAAG,CAAC;MACRmB,IAAI,EAAEN,eAAe;MACrBO,GAAG,EAAEA,GAAG,CAACC,QAAQ,CAACN;IACpB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUW,UAAU,GAAG;EACrB,MAAMzB,SAAS,CAACI,cAAc,EAAEY,KAAK,CAAC,CAAC,CAAC;AAC1C;;AAEA,UAAUU,WAAW,GAAG;EACtB,MAAM1B,SAAS,CAACK,eAAe,EAAEiB,MAAM,CAAC;AAC1C;AAEA,UAAUK,WAAW,GAAG;EACtB,MAAM3B,SAAS,CAACU,eAAe,EAAEc,MAAM,CAAC;AAC1C;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC,MAAM9B,GAAG,CAAC,CAACG,IAAI,CAACwB,UAAU,CAAC,EAAExB,IAAI,CAACyB,WAAW,CAAC,EAAEzB,IAAI,CAAC0B,WAAW,CAAC,CAAC,CAAC;AACrE"},"metadata":{},"sourceType":"module"}