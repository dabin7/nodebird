{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\n\n//이전상태 + 액션 = 다음상태 rootReducer\nconst rootReducer = combineReducer({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  //서버사이드렌더링 ssr 을 위해 HYDRATE를 사용 index를 넣어줌\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","combineReducers","user","post","rootReducer","combineReducer","index","state","action","type","console","log","payload"],"sources":["C:/Users/정다빈/Desktop/nodebird/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n//이전상태 + 액션 = 다음상태 rootReducer\r\nconst rootReducer = combineReducer({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log('HYDRATE', action);\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }, //서버사이드렌더링 ssr 을 위해 HYDRATE를 사용 index를 넣어줌\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,eAAe,QAAQ,OAAO;AAEvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;;AAEzB;AACA,MAAMC,WAAW,GAAGC,cAAc,CAAC;EACjCC,KAAK,EAAE,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;IAC7B,QAAQA,MAAM,CAACC,IAAI;MACjB,KAAKT,OAAO;QACVU,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,MAAM,CAAC;QAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACI,OAAO;MAEtC;QACE,OAAOL,KAAK;IAAC;EAEnB,CAAC;EAAE;EACHL,IAAI;EACJC;AACF,CAAC,CAAC;AAEF,eAAeC,WAAW"},"metadata":{},"sourceType":"module"}