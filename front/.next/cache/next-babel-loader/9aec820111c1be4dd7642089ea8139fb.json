{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그',\n    Images: [{\n      id: shortId.generate()\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //더미 데이터  User,Image등이 대문자로 시작하는 이유는 시큐얼라이즈 라이브러리에서 대문자로 사용되기때문\n\nexport const generateDummyPost = number => Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n//무한 스크롤링 구현\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로'\n  }\n});\n\n//immer로 스위치문을 다 바꿔줬음. 불변성을 지키면서 state => draft\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      //아래 주석 코드가 위 2줄로 바뀜. unshift *\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n      // //불변성 지키려면 이렇게 해줌...\n\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        return state;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","Comments","imagePaths","addPostLoading","addPostDone","addPostError","loadPostsLoading","loadPostsDone","loadPostsError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","src","image","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","error","unshift","filter","v","post","find","postId"],"sources":["C:/Users/정다빈/Desktop/nodebird/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n\r\n      User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n      },\r\n\r\n      content: '첫 번째 게시글 #해시태그',\r\n\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n        },\r\n      ],\r\n\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'nero',\r\n          },\r\n          content: '우와',\r\n        },\r\n\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'hero',\r\n          },\r\n          content: '사고싶어요~',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}; //더미 데이터  User,Image등이 대문자로 시작하는 이유는 시큐얼라이즈 라이브러리에서 대문자로 사용되기때문\r\n\r\nexport const generateDummyPost = (number) =>\r\n  Array(20)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.image(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n//무한 스크롤링 구현\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n});\r\n\r\n//immer로 스위치문을 다 바꿔줬음. 불변성을 지키면서 state => draft\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        break;\r\n\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      //아래 주석 코드가 위 2줄로 바뀜. unshift *\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // //불변성 지키려면 이렇게 해줌...\r\n\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}