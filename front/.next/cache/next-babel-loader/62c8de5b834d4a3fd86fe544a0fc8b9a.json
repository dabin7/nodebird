{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport shortId from 'shortid';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그',\n    Images: [{\n      id: shortId.generate()\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //더미 데이터\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로'\n    }\n  };\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        //dummyPost를 앞에다 두어야 게시물이 위에 온다.\n        addPostLoading: false,\n        addPostDone: true\n      });\n    case ADD_POST_FAILURE:\n      return {\n        addPostLoading: false,\n        addPostError: action.error\n      };\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        //dummyPost를 앞에다 두어야 게시물이 위에 온다.\n        removePostLoading: false,\n        removePostDone: true\n      });\n    case REMOVE_POST_FAILURE:\n      return {\n        removePostLoading: false,\n        removePostError: action.error\n      };\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      var post = _objectSpread({}, state.mainPosts[postIndex]);\n      post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n      var mainPosts = _toConsumableArray(state.mainPosts);\n      mainPosts[postIndex] = post;\n      //불변성 지키려면 이렇게 해줌...\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n    case ADD_COMMENT_FAILURE:\n      return {\n        addCommentLoading: false,\n        addCommentError: action.error\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"sources":["C:/Users/정다빈/Desktop/nodebird/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n\r\n      User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n      },\r\n\r\n      content: '첫 번째 게시글 #해시태그',\r\n\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n        },\r\n      ],\r\n\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'nero',\r\n          },\r\n          content: '우와',\r\n        },\r\n\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'hero',\r\n          },\r\n          content: '사고싶어요~',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n}; //더미 데이터\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로',\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], //dummyPost를 앞에다 두어야 게시물이 위에 온다.\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n\r\n    case REMOVE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        removePostLoading: true,\r\n        removePostDone: false,\r\n        removePostError: null,\r\n      };\r\n    case REMOVE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], //dummyPost를 앞에다 두어야 게시물이 위에 온다.\r\n        removePostLoading: false,\r\n        removePostDone: true,\r\n      };\r\n    case REMOVE_POST_FAILURE:\r\n      return {\r\n        removePostLoading: false,\r\n        removePostError: action.error,\r\n      };\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      const postIndex = state.mainPosts.findIndex(\r\n        (v) => v.id === action.data.postId\r\n      );\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = post;\r\n      //불변성 지키려면 이렇게 해줌...\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}